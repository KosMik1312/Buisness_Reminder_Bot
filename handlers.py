from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import logging
from database import Database
from datetime import datetime
import asyncio
import re

router = Router(name="main_router")
logger = logging.getLogger('bot_logger')
db = Database()


class TaskStates(StatesGroup):
    waiting_for_task = State()
    waiting_for_importance = State()
    waiting_for_task_id = State()
    waiting_for_reminder_date = State()
    waiting_for_reminder_task = State()


def get_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="todo"),
                InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á", callback_data="list")
            ],
            [
                InlineKeyboardButton(text="–ó–∞–¥–∞—á–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="listall"),
                InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="retask")
            ],
            [
                InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="reminder"),
                InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
    )


def get_importance_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—á–µ–Ω—å –≤–∞–∂–Ω–∞—è", callback_data="high")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏", callback_data="medium")],
            [InlineKeyboardButton(text="–ù–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è", callback_data="low")]
        ]
    )


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=get_keyboard()
    )


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    logger.info(f"User {message.from_user.id} requested help")
    await message.answer(
        "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/todo - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n"
        "/listall - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n"
        "/retask - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "/reminder - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏",
        reply_markup=get_keyboard()
    )


@router.callback_query(F.data == "todo")
async def callback_todo(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} initiated task creation")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskStates.waiting_for_task)
    await callback.answer()


@router.message(StateFilter(TaskStates.waiting_for_task))
async def process_task_text(message: types.Message, state: FSMContext):
    await state.update_data(task_text=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:",
        reply_markup=get_importance_keyboard()
    )
    await state.set_state(TaskStates.waiting_for_importance)


@router.callback_query(StateFilter(TaskStates.waiting_for_importance))
async def process_importance(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    task_text = data["task_text"]
    importance = callback.data

    await db.add_task(task_text, importance)
    logger.info(f"User {callback.from_user.id} added task: {task_text} with importance: {importance}")
    await callback.message.answer("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_keyboard())
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "list")
async def callback_list(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} requested tasks list")
    tasks = await db.get_tasks(completed=False)
    if not tasks:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return

    response = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        response += f"ID: {task[0]}\n"
        response += f"–ó–∞–¥–∞—á–∞: {task[1]}\n"
        response += f"–°–æ–∑–¥–∞–Ω–∞: {task[2]}\n"
        response += f"–í–∞–∂–Ω–æ—Å—Ç—å: {task[3]}\n\n"

    await callback.message.answer(response, reply_markup=get_keyboard())
    await callback.answer()


@router.callback_query(F.data == "listall")
async def callback_listall(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} requested all tasks")
    tasks = await db.get_all_tasks()
    if not tasks:
        await callback.message.answer("–ë–∞–∑–∞ –∑–∞–¥–∞—á –ø—É—Å—Ç–∞!")
        return

    response = "üìã –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"
    for task in tasks:
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if task[4] else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        response += f"ID: {task[0]}\n"
        response += f"–ó–∞–¥–∞—á–∞: {task[1]}\n"
        response += f"–°–æ–∑–¥–∞–Ω–∞: {task[2]}\n"
        #response += f"–í–∞–∂–Ω–æ—Å—Ç—å: {task[3]}\n"
        response += f"–°—Ç–∞—Ç—É—Å: {status}\n\n"

    await callback.message.answer(response, reply_markup=get_keyboard())
    await callback.answer()


@router.callback_query(F.data == "retask")
async def callback_retask(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} trying to complete task")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:")
    await state.set_state(TaskStates.waiting_for_task_id)
    await callback.answer()


@router.message(StateFilter(TaskStates.waiting_for_task_id))
async def process_task_completion(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
        await db.complete_task(task_id)
        logger.info(f"User {message.from_user.id} completed task {task_id}")
        await message.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", reply_markup=get_keyboard())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏!")
    finally:
        await state.clear()


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} requested help via button")
    await callback.message.answer(
        "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/todo - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n"
        "/listall - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n"
        "/retask - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "/reminder - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏",
        reply_markup=get_keyboard()
    )
    await callback.answer()


@router.message(Command("todo"))
async def cmd_todo(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} started creating new task via command")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskStates.waiting_for_task)


@router.message(Command("list"))
async def cmd_list(message: types.Message):
    logger.info(f"User {message.from_user.id} requested tasks list via command")
    tasks = await db.get_tasks(completed=False)
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!", reply_markup=get_keyboard())
        return

    response = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        response += f"ID: {task[0]}\n"
        response += f"–ó–∞–¥–∞—á–∞: {task[1]}\n"
        response += f"–°–æ–∑–¥–∞–Ω–∞: {task[2]}\n"
        response += f"–í–∞–∂–Ω–æ—Å—Ç—å: {task[3]}\n\n"

    await message.answer(response, reply_markup=get_keyboard())


@router.message(Command("listall"))
async def cmd_listall(message: types.Message):
    logger.info(f"User {message.from_user.id} requested all tasks via command")
    tasks = await db.get_all_tasks()
    if not tasks:
        await message.answer("–ë–∞–∑–∞ –∑–∞–¥–∞—á –ø—É—Å—Ç–∞!", reply_markup=get_keyboard())
        return

    response = "üìã –í—Å–µ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if task[4] else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        response += f"ID: {task[0]}\n"
        response += f"–ó–∞–¥–∞—á–∞: {task[1]}\n"
        response += f"–°–æ–∑–¥–∞–Ω–∞: {task[2]}\n"
        response += f"–í–∞–∂–Ω–æ—Å—Ç—å: {task[3]}\n"
        response += f"–°—Ç–∞—Ç—É—Å: {status}\n\n"

    await message.answer(response, reply_markup=get_keyboard())


@router.message(Command("retask"))
async def cmd_retask(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} trying to complete task via command")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:")
    await state.set_state(TaskStates.waiting_for_task_id)


@router.callback_query(F.data == "reminder")
async def callback_reminder(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} initiated reminder setting")
    tasks = await db.get_tasks(completed=False)
    if not tasks:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
        return
    
    response = "–í—ã–±–µ—Ä–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for task in tasks:
        response += f"ID: {task[0]}\n"
        response += f"–ó–∞–¥–∞—á–∞: {task[1]}\n\n"
    
    await callback.message.answer(response)
    await state.set_state(TaskStates.waiting_for_reminder_task)
    await callback.answer()


@router.message(StateFilter(TaskStates.waiting_for_reminder_task))
async def process_reminder_task(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
        task = await db.get_task_by_id(task_id)
        if not task:
            await message.answer("–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.clear()
            return
        
        await state.update_data(reminder_task_id=task_id)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.03.2024 15:30"
        )
        await state.set_state(TaskStates.waiting_for_reminder_date)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏!")
        await state.clear()


@router.message(StateFilter(TaskStates.waiting_for_reminder_date))
async def process_reminder_date(message: types.Message, state: FSMContext):
    date_pattern = r'^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$'
    if not re.match(date_pattern, message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
        return

    try:
        reminder_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        if reminder_date < datetime.now():
            await message.answer("–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
            return

        data = await state.get_data()
        task_id = data['reminder_task_id']
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î
        await db.set_reminder(task_id, reminder_date, message.from_user.id)
        
        await message.answer(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_date.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_keyboard()
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        asyncio.create_task(schedule_reminder(
            message.bot,
            message.from_user.id,
            task_id,
            reminder_date
        ))
        
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    finally:
        await state.clear()


async def schedule_reminder(bot, user_id, task_id, reminder_date):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    now = datetime.now()
    delay = (reminder_date - now).total_seconds()
    
    if delay > 0:
        await asyncio.sleep(delay)
        task = await db.get_task_by_id(task_id)
        if task and not task[4]:  # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            await bot.send_message(
                user_id,
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                f"–ó–∞–¥–∞—á–∞: {task[1]}\n"
                f"–í–∞–∂–Ω–æ—Å—Ç—å: {task[3]}\n"
                f"ID –∑–∞–¥–∞—á–∏: {task[0]}"
            )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CallbackQuery
# –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
